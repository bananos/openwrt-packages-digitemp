sudo: required
language: c
services: docker

env:
  global:
    - DOCKERHUB_IMG=yhnw/openwrt-sdk
    - PKG_REPOS_URL=https://github.com/hnw/openwrt-packages.git
    - PKG_NAME=digitemp
    - OPENWRT_GID=1000
    - GCS_ACCESS_KEY_ID=GOOGZU4AGJJUVQ4DLX52
    - GCS_BUCKET=hnw-gcs-bucket-for-travis
    - GCS_UPLOAD_DIR="$(basename ${TRAVIS_REPO_SLUG})-${TRAVIS_BUILD_NUMBER}"
    - secure: "QhV5yMG9+yZS6nok5i2dP7th0Djf3hR5Aoq9nwZiD+fcy32hwTCzxVDldK5lFDLlI7MwhRt0jrhI21foANQKIOFeq8PWenfcTeNB/UpeFLHl1b2yASpNDNL2fgQZ3ApoQiOGcfYoUv9fw0gDwkPkjIxbnJh3IefJbvbnBopl7pJ0u8H9363Pak0lH86ujZxxdS7bigXMagZNN8hYuMXP6qBBpzH9aR4Xl/E0tQrm8vuOSIUzwBeODJFALqnBMnjIf0Mom8+Onl3yDeJvDsoybPfSso3w2wwYgUpjF31vxOwLFKOH7PUuPKniNuMJEII1h67qPtN6h7XdpohaDUTBOXzHb7IlmXXRPuc7grNtshAxNHbAOPBEDJi2nocZEm2YobRedP4FU6Tdie439BasfYbpW6O+RsEpPSBdESASQ/bWf5ACdKG11aP1JIY68auFk8iGQyWsVaFVTUrpmsrUgo9rI74v7JzSXEV9uI/Anlyi70oygUUDGZxI9GmXsMD15aTu6xBVOXcyV0a/1WMTXodR+oB/33V/5dZDOOF5Y82DXrREQD3sYxKqJJe1lmEA/xvGaa11+6S5hjwuYukPzXdD6IALawVsgykzsXaUjWNj+sHoQzCarw79NQC7Z8vepqJt6xZBas3/MV1mFhSOF3QGt1gaydtCebf7nB2d8yY="
    - VERBOSE=1
  matrix:
    - DOCKERHUB_TAG=15.05.1-ar71xx      BUILD_DIR=bin/ar71xx/packages        OUT_DIR=15.05.1/mips_24kc
    - DOCKERHUB_TAG=17.01-ar71xx        BUILD_DIR=bin/packages/mips_24kc     OUT_DIR=17.01/mips_24kc
    - DOCKERHUB_TAG=17.01-ramips-mt7620 BUILD_DIR=bin/packages/mipsel_24kc   OUT_DIR=17.01/mipsel_24kc
    - DOCKERHUB_TAG=17.01-bcm53xx       BUILD_DIR=bin/packages/arm_cortex-a9 OUT_DIR=17.01/arm_cortex-a9

script:
  - mkdir -p $PWD/pkgs
  - scripts/chgrp-for-docker.sh -g $OPENWRT_GID $PWD/pkgs
  - docker run --rm -u openwrt -v $PWD:/work ${DOCKERHUB_IMG}:${DOCKERHUB_TAG} /bin/bash /work/scripts/build.sh $PKG_NAME $BUILD_DIR /work /work/pkgs $OUT_DIR $VERBOSE
  - ls -la

after_failure:
  - if [[ -e pkgs/build.log ]] ; then tail -300 pkgs/build.log ; fi

before_deploy:
  - |
    if [[ -n ${TRAVIS_TAG} || -n ${TRAVIS_BRANCH} && ${TRAVIS_BRANCH} == "master" ]] ; then
        scripts/extract-encrypted-tar.sh -K $encrypted_c25718705c4b_key -iv $encrypted_c25718705c4b_iv secrets.tar.enc
        if [[ -e $HOME/.ssh ]] ; then
            mv $HOME/.ssh $HOME/.ssh.orig
        fi
        if [[ -n ${TRAVIS_TAG} ]] ; then
            echo "This build is triggered by tag: preparing deploy-key for pushing binary packages"
            mv .ssh_for_push_pkgs $HOME/.ssh
        else
            echo "We are on master branch: preparing deploy-key for pushing release tag"
            mv .ssh_for_push_tag $HOME/.ssh
        fi
    fi

deploy:
  - provider: releases
    api_key:
      secure: "fIM61yrZa9MOZhCFFozCVM1KtadBjBFAw80fLf9+sOj7nZsO+A7DVXAHcyQJ0sLL17NYiR11Zbm9gM/6JqPqUTETZlkm/mW65YIRY2I9jGEUbkWycTcnO/O03bsH/A07U2EdX1OxTUb7/OF5BVnt7Bja6HAxlekUMEFkplMbX2UxT5YD6vdGm40uXbu0PRB7gpq3mFZN+7FSaya8c0erD8AtDi7nNMylMo5xl9oKSSyDBLPFO2WsWpAa2wle/xlUHyeMMhGx/bucIeHZCXd6HblQV7oJpnRlCWNhPH4CkijkHjsRbKqoQKMQ3p1qUFe5qFFeDpsGVflpkJMmDqSpNmtoW5sY9MokTTFMzcKVQR3wLJKbkm6noAHnJvEdXyZd2BzQJCbUdHsxmYYkDQKHYQ2dhwOr8MwaSnd7G/D2bEtEmFWUBg1delQKowdWjLY8bq2HgeHDVUt+vuRefft5q7ZsQIgwK65NAvltfsqGUmXJO6n8lktsCZe2Fsg4g7n5xWMwKCxw64+3WyNsjNNhZIj9nFG4zuLaKuoJLDXgVrK/AYXIRubvj2qiseRPmMHZ2X2m0in4f7ohdV9dcTVUl5ZRJAt6p6sTOMLS542WKTm0GCchDMPA/ej9je0IN8igDZlzpVE60ppt8/2bg/gMKjSq7xgF8/ABYrbkrWBGrPM="
    file_glob: true
    file: "pkgs/flattened/*.ipk"
    skip_cleanup: true
    on:
      tags: true
  - provider: gcs
    access_key_id: ${GCS_ACCESS_KEY_ID}
    secret_access_key: ${GCS_SECRET_ACCESS_KEY}
    bucket: ${GCS_BUCKET}
    skip_cleanup: true
    local-dir: pkgs/structured/
    upload-dir: ${GCS_UPLOAD_DIR}
    all_branches: true
  - provider: gcs
    access_key_id: ${GCS_ACCESS_KEY_ID}
    secret_access_key: ${GCS_SECRET_ACCESS_KEY}
    bucket: ${GCS_BUCKET}
    skip_cleanup: true
    local-dir: pkgs/structured/
    upload-dir: ${GCS_UPLOAD_DIR}
    on:
      tags: true

jobs:
  include:
    - if: branch = master
      stage: Push release tag
      script: skip
      deploy:
        - provider: script
          script: scripts/push-tag.sh
    - if: tag IS present
      stage: Publish binary packages to repos
      script:
        - git clone --branch=master ${PKG_REPOS_URL} ../repos
        - envsubst < .boto.in > $HOME/.boto
        - gsutil cp -r s3://${GCS_BUCKET}/${GCS_UPLOAD_DIR}/'*' ../repos
      deploy:
        - provider: script
          script: scripts/push-pkgs.sh ../repos
          on:
            tags: true
